import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export declare namespace CFAv1Library {
    type InitDataStruct = {
        host: PromiseOrValue<string>;
        cfa: PromiseOrValue<string>;
    };
    type InitDataStructOutput = [string, string] & {
        host: string;
        cfa: string;
    };
}
export declare namespace IDAv1Library {
    type InitDataStruct = {
        host: PromiseOrValue<string>;
        ida: PromiseOrValue<string>;
    };
    type InitDataStructOutput = [string, string] & {
        host: string;
        ida: string;
    };
}
export declare namespace SuperfluidFrameworkDeployer {
    type FrameworkStruct = {
        governance: PromiseOrValue<string>;
        host: PromiseOrValue<string>;
        cfa: PromiseOrValue<string>;
        cfaLib: CFAv1Library.InitDataStruct;
        ida: PromiseOrValue<string>;
        idaLib: IDAv1Library.InitDataStruct;
        superTokenFactory: PromiseOrValue<string>;
        resolver: PromiseOrValue<string>;
        superfluidLoader: PromiseOrValue<string>;
        cfaV1Forwarder: PromiseOrValue<string>;
    };
    type FrameworkStructOutput = [
        string,
        string,
        string,
        CFAv1Library.InitDataStructOutput,
        string,
        IDAv1Library.InitDataStructOutput,
        string,
        string,
        string,
        string
    ] & {
        governance: string;
        host: string;
        cfa: string;
        cfaLib: CFAv1Library.InitDataStructOutput;
        ida: string;
        idaLib: IDAv1Library.InitDataStructOutput;
        superTokenFactory: string;
        resolver: string;
        superfluidLoader: string;
        cfaV1Forwarder: string;
    };
}
export interface SuperfluidFrameworkDeployerInterface extends utils.Interface {
    functions: {
        "RESOLVER_BASE_SUPER_TOKEN_KEY()": FunctionFragment;
        "RESOLVER_BASE_TOKEN_KEY()": FunctionFragment;
        "deployNativeAssetSuperToken(string,string)": FunctionFragment;
        "deployPureSuperToken(string,string,uint256)": FunctionFragment;
        "deployWrapperSuperToken(string,string,uint8,uint256)": FunctionFragment;
        "getFramework()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "RESOLVER_BASE_SUPER_TOKEN_KEY" | "RESOLVER_BASE_TOKEN_KEY" | "deployNativeAssetSuperToken" | "deployPureSuperToken" | "deployWrapperSuperToken" | "getFramework"): FunctionFragment;
    encodeFunctionData(functionFragment: "RESOLVER_BASE_SUPER_TOKEN_KEY", values?: undefined): string;
    encodeFunctionData(functionFragment: "RESOLVER_BASE_TOKEN_KEY", values?: undefined): string;
    encodeFunctionData(functionFragment: "deployNativeAssetSuperToken", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "deployPureSuperToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "deployWrapperSuperToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getFramework", values?: undefined): string;
    decodeFunctionResult(functionFragment: "RESOLVER_BASE_SUPER_TOKEN_KEY", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "RESOLVER_BASE_TOKEN_KEY", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployNativeAssetSuperToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployPureSuperToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployWrapperSuperToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFramework", data: BytesLike): Result;
    events: {};
}
export interface SuperfluidFrameworkDeployer extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: SuperfluidFrameworkDeployerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        RESOLVER_BASE_SUPER_TOKEN_KEY(overrides?: CallOverrides): Promise<[string]>;
        RESOLVER_BASE_TOKEN_KEY(overrides?: CallOverrides): Promise<[string]>;
        deployNativeAssetSuperToken(_name: PromiseOrValue<string>, _symbol: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deployPureSuperToken(_name: PromiseOrValue<string>, _symbol: PromiseOrValue<string>, _initialSupply: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deployWrapperSuperToken(_underlyingName: PromiseOrValue<string>, _underlyingSymbol: PromiseOrValue<string>, _decimals: PromiseOrValue<BigNumberish>, _mintLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getFramework(overrides?: CallOverrides): Promise<[
            SuperfluidFrameworkDeployer.FrameworkStructOutput
        ] & {
            sf: SuperfluidFrameworkDeployer.FrameworkStructOutput;
        }>;
    };
    RESOLVER_BASE_SUPER_TOKEN_KEY(overrides?: CallOverrides): Promise<string>;
    RESOLVER_BASE_TOKEN_KEY(overrides?: CallOverrides): Promise<string>;
    deployNativeAssetSuperToken(_name: PromiseOrValue<string>, _symbol: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deployPureSuperToken(_name: PromiseOrValue<string>, _symbol: PromiseOrValue<string>, _initialSupply: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deployWrapperSuperToken(_underlyingName: PromiseOrValue<string>, _underlyingSymbol: PromiseOrValue<string>, _decimals: PromiseOrValue<BigNumberish>, _mintLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getFramework(overrides?: CallOverrides): Promise<SuperfluidFrameworkDeployer.FrameworkStructOutput>;
    callStatic: {
        RESOLVER_BASE_SUPER_TOKEN_KEY(overrides?: CallOverrides): Promise<string>;
        RESOLVER_BASE_TOKEN_KEY(overrides?: CallOverrides): Promise<string>;
        deployNativeAssetSuperToken(_name: PromiseOrValue<string>, _symbol: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        deployPureSuperToken(_name: PromiseOrValue<string>, _symbol: PromiseOrValue<string>, _initialSupply: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        deployWrapperSuperToken(_underlyingName: PromiseOrValue<string>, _underlyingSymbol: PromiseOrValue<string>, _decimals: PromiseOrValue<BigNumberish>, _mintLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            string,
            string
        ] & {
            underlyingToken: string;
            superToken: string;
        }>;
        getFramework(overrides?: CallOverrides): Promise<SuperfluidFrameworkDeployer.FrameworkStructOutput>;
    };
    filters: {};
    estimateGas: {
        RESOLVER_BASE_SUPER_TOKEN_KEY(overrides?: CallOverrides): Promise<BigNumber>;
        RESOLVER_BASE_TOKEN_KEY(overrides?: CallOverrides): Promise<BigNumber>;
        deployNativeAssetSuperToken(_name: PromiseOrValue<string>, _symbol: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deployPureSuperToken(_name: PromiseOrValue<string>, _symbol: PromiseOrValue<string>, _initialSupply: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deployWrapperSuperToken(_underlyingName: PromiseOrValue<string>, _underlyingSymbol: PromiseOrValue<string>, _decimals: PromiseOrValue<BigNumberish>, _mintLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getFramework(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        RESOLVER_BASE_SUPER_TOKEN_KEY(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        RESOLVER_BASE_TOKEN_KEY(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deployNativeAssetSuperToken(_name: PromiseOrValue<string>, _symbol: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deployPureSuperToken(_name: PromiseOrValue<string>, _symbol: PromiseOrValue<string>, _initialSupply: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deployWrapperSuperToken(_underlyingName: PromiseOrValue<string>, _underlyingSymbol: PromiseOrValue<string>, _decimals: PromiseOrValue<BigNumberish>, _mintLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getFramework(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=SuperfluidFrameworkDeployer.d.ts.map