import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type { GoodCFAHookMock, GoodCFAHookMockInterface } from "../../../../contracts/mocks/CFAHookMocks.sol/GoodCFAHookMock";
type GoodCFAHookMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class GoodCFAHookMock__factory extends ContractFactory {
    constructor(...args: GoodCFAHookMockConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<GoodCFAHookMock>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): GoodCFAHookMock;
    connect(signer: Signer): GoodCFAHookMock__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b50336080526080516104a461003060003960006101ba01526104a46000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632742e95a146100515780636ac5bc3114610078578063ad53099b1461008b578063e3d8fefe146100a0575b600080fd5b61006461005f366004610392565b6100b3565b604051901515815260200160405180910390f35b610064610086366004610392565b61013a565b61009e6100993660046103d8565b6101af565b005b6100646100ae3660046103fc565b61021a565b600080546001600160a01b031633146100df57604051631f9bdf8b60e21b815260040160405180910390fd5b7f384aa14da139a61bae36f996306e6f00f1d268225166dc28658f4e767a5441948484600001518560200151866040015187606001518760405161012896959493929190610432565b60405180910390a15060019392505050565b600080546001600160a01b0316331461016657604051631f9bdf8b60e21b815260040160405180910390fd5b7f93d782d1ed815a911862320347e0992d5c7f533820b0b3cdf30f50786076df028484600001518560200151866040015187606001518760405161012896959493929190610432565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101f8576040516338ebc58960e11b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b0316331461024657604051631f9bdf8b60e21b815260040160405180910390fd5b7f38b974273537de1272ddb15a1313c9fe0fd4455c11ccceb5a529e0654f7d321b8383600001518460200151856040015186606001516040516102be9594939291906001600160a01b039586168152938516602085015291841660408401529092166060820152600b9190910b608082015260a00190565b60405180910390a150600192915050565b6001600160a01b03811681146102e457600080fd5b50565b8035600b81900b81146102f957600080fd5b919050565b60006080828403121561031057600080fd5b6040516080810181811067ffffffffffffffff8211171561034157634e487b7160e01b600052604160045260246000fd5b6040529050808235610352816102cf565b81526020830135610362816102cf565b60208201526040830135610375816102cf565b6040820152610386606084016102e7565b60608201525092915050565b600080600060c084860312156103a757600080fd5b83356103b2816102cf565b92506103c185602086016102fe565b91506103cf60a085016102e7565b90509250925092565b6000602082840312156103ea57600080fd5b81356103f5816102cf565b9392505050565b60008060a0838503121561040f57600080fd5b823561041a816102cf565b915061042984602085016102fe565b90509250929050565b6001600160a01b0396871681529486166020860152928516604085015293166060830152600b92830b608083015290910b60a082015260c0019056fea2646970667358221220b4a4dc466adf174d0672a493057de205c22a86edd294597a4eac8b885f60bf8b64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "NOT_CFA";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NOT_OWNER";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "contract ISuperfluidToken";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "flowOperator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "int96";
            readonly name: "flowRate";
            readonly type: "int96";
        }];
        readonly name: "OnCreateEvent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "contract ISuperfluidToken";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "flowOperator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "int96";
            readonly name: "flowRate";
            readonly type: "int96";
        }, {
            readonly indexed: false;
            readonly internalType: "int96";
            readonly name: "oldFlowRate";
            readonly type: "int96";
        }];
        readonly name: "OnDeleteEvent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "contract ISuperfluidToken";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "flowOperator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "int96";
            readonly name: "flowRate";
            readonly type: "int96";
        }, {
            readonly indexed: false;
            readonly internalType: "int96";
            readonly name: "oldFlowRate";
            readonly type: "int96";
        }];
        readonly name: "OnUpdateEvent";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract ISuperfluidToken";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "flowOperator";
                readonly type: "address";
            }, {
                readonly internalType: "int96";
                readonly name: "flowRate";
                readonly type: "int96";
            }];
            readonly internalType: "struct IConstantFlowAgreementHook.CFAHookParams";
            readonly name: "newFlowData";
            readonly type: "tuple";
        }];
        readonly name: "onCreate";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract ISuperfluidToken";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "flowOperator";
                readonly type: "address";
            }, {
                readonly internalType: "int96";
                readonly name: "flowRate";
                readonly type: "int96";
            }];
            readonly internalType: "struct IConstantFlowAgreementHook.CFAHookParams";
            readonly name: "newFlowData";
            readonly type: "tuple";
        }, {
            readonly internalType: "int96";
            readonly name: "oldFlowRate";
            readonly type: "int96";
        }];
        readonly name: "onDelete";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract ISuperfluidToken";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "flowOperator";
                readonly type: "address";
            }, {
                readonly internalType: "int96";
                readonly name: "flowRate";
                readonly type: "int96";
            }];
            readonly internalType: "struct IConstantFlowAgreementHook.CFAHookParams";
            readonly name: "newFlowData";
            readonly type: "tuple";
        }, {
            readonly internalType: "int96";
            readonly name: "oldFlowRate";
            readonly type: "int96";
        }];
        readonly name: "onUpdate";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract ConstantFlowAgreementV1";
            readonly name: "_cfaV1";
            readonly type: "address";
        }];
        readonly name: "setCFA";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): GoodCFAHookMockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): GoodCFAHookMock;
}
export {};
//# sourceMappingURL=GoodCFAHookMock__factory.d.ts.map