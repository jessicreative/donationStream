{
  "contractName": "IConstantFlowAgreementHook",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISuperfluidToken",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowOperator",
              "type": "address"
            },
            {
              "internalType": "int96",
              "name": "flowRate",
              "type": "int96"
            }
          ],
          "internalType": "struct IConstantFlowAgreementHook.CFAHookParams",
          "name": "newFlowData",
          "type": "tuple"
        }
      ],
      "name": "onCreate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperfluidToken",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowOperator",
              "type": "address"
            },
            {
              "internalType": "int96",
              "name": "flowRate",
              "type": "int96"
            }
          ],
          "internalType": "struct IConstantFlowAgreementHook.CFAHookParams",
          "name": "newFlowData",
          "type": "tuple"
        },
        {
          "internalType": "int96",
          "name": "oldFlowRate",
          "type": "int96"
        }
      ],
      "name": "onUpdate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperfluidToken",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowOperator",
              "type": "address"
            },
            {
              "internalType": "int96",
              "name": "flowRate",
              "type": "int96"
            }
          ],
          "internalType": "struct IConstantFlowAgreementHook.CFAHookParams",
          "name": "newFlowData",
          "type": "tuple"
        },
        {
          "internalType": "int96",
          "name": "oldFlowRate",
          "type": "int96"
        }
      ],
      "name": "onDelete",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"}],\"internalType\":\"struct IConstantFlowAgreementHook.CFAHookParams\",\"name\":\"newFlowData\",\"type\":\"tuple\"}],\"name\":\"onCreate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"}],\"internalType\":\"struct IConstantFlowAgreementHook.CFAHookParams\",\"name\":\"newFlowData\",\"type\":\"tuple\"},{\"internalType\":\"int96\",\"name\":\"oldFlowRate\",\"type\":\"int96\"}],\"name\":\"onDelete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"}],\"internalType\":\"struct IConstantFlowAgreementHook.CFAHookParams\",\"name\":\"newFlowData\",\"type\":\"tuple\"},{\"internalType\":\"int96\",\"name\":\"oldFlowRate\",\"type\":\"int96\"}],\"name\":\"onUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"details\":\"The contract that implements this interface MUST only allow the CFA contract to call it\",\"kind\":\"dev\",\"methods\":{\"onCreate(address,(address,address,address,int96))\":{\"details\":\"This should be implemented with an onlyCFA modifier, so that only the CFA can call the function\",\"params\":{\"newFlowData\":\"the new flow data taken by the hook\",\"token\":\"the streamed super token\"},\"returns\":{\"_0\":\"bool\"}},\"onDelete(address,(address,address,address,int96),int96)\":{\"details\":\"This should be implemented with an onlyCFA modifier, so that only the CFA can call the function\",\"params\":{\"newFlowData\":\"the new flow data taken by the hook\",\"oldFlowRate\":\"previous flowrate\",\"token\":\"the streamed super token\"},\"returns\":{\"_0\":\"bool\"}},\"onUpdate(address,(address,address,address,int96),int96)\":{\"details\":\"This should be implemented with an onlyCFA modifier, so that only the CFA can call the function\",\"params\":{\"newFlowData\":\"the new flow data taken by the hook\",\"oldFlowRate\":\"previous flowrate\",\"token\":\"the streamed super token\"},\"returns\":{\"_0\":\"bool\"}}},\"title\":\"IConstantFlowAgreementHook interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onCreate(address,(address,address,address,int96))\":{\"notice\":\"A hook which executes on stream creation if the hook contract is set in the CFA\"},\"onDelete(address,(address,address,address,int96),int96)\":{\"notice\":\"A hook which executes on stream deletion if the hook contract is set in the CFA\"},\"onUpdate(address,(address,address,address,int96),int96)\":{\"notice\":\"A hook which executes on stream update if the hook contract is set in the CFA\"}},\"notice\":\"An interface for the functions needed by a CFA hook contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/interfaces/agreements/IConstantFlowAgreementHook.sol\":\"IConstantFlowAgreementHook\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/interfaces/agreements/IConstantFlowAgreementHook.sol\":{\"keccak256\":\"0x908b492d11c73d5f7f1707b3faf8e29aa5b6b35618b40e4b0c8f68873cbcf69b\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://6c7f2f71936ff6dab1f5c854f2d4fa5d37b576c0e904369ea240d96eab58781f\",\"dweb:/ipfs/QmZJCdchrpjZeuCZBo7okXnjxLFheLJcXvWqxLkxm5V5fv\"]},\"project:/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0x9b4fab6dcac1337f78e04d67d8c2b48b1de8bd4bbf14b475840f9dbda7b8f21e\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://cc2f3629ad0cb46bd4f595880591ad6c9d75a82d920cb9355e462fbf8022c820\",\"dweb:/ipfs/QmXMovxK4qpWT4yffXxUVjkMNwxEfS6mtn39mLSmjaxEdW\"]},\"project:/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0x9cad3866982902ea88df0874a563d2e4aeba5a5bcc6289c30cccf9b4099d2fb6\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://e8fd960b259331f204c7cb7dcd32b09d68f4294e3b872fad00ad467609c3ef72\",\"dweb:/ipfs/QmeZFEvsDunXQGPbXFfN5AvfKM5am1FY8Xv6e3c4tNKvgY\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: AGPLv3\npragma solidity ^0.8.0;\n\nimport { ISuperfluidToken } from \"../superfluid/ISuperfluidToken.sol\";\n\n/// @title IConstantFlowAgreementHook interface\n/// @author Superfluid\n/// @notice An interface for the functions needed by a CFA hook contract\n/// @dev The contract that implements this interface MUST only allow the CFA contract to call it\ninterface IConstantFlowAgreementHook {\n    struct CFAHookParams {\n        address sender;\n        address receiver;\n        address flowOperator;\n        int96 flowRate;\n    }\n\n    /// @notice A hook which executes on stream creation if the hook contract is set in the CFA\n    /// @dev This should be implemented with an onlyCFA modifier, so that only the CFA can call the function\n    /// @param token the streamed super token\n    /// @param newFlowData the new flow data taken by the hook\n    /// @return bool\n    function onCreate(ISuperfluidToken token, CFAHookParams memory newFlowData)\n        external\n        returns (bool);\n\n    /// @notice A hook which executes on stream update if the hook contract is set in the CFA\n    /// @dev This should be implemented with an onlyCFA modifier, so that only the CFA can call the function\n    /// @param token the streamed super token\n    /// @param newFlowData the new flow data taken by the hook\n    /// @param oldFlowRate previous flowrate\n    /// @return bool\n    function onUpdate(\n        ISuperfluidToken token,\n        CFAHookParams memory newFlowData,\n        int96 oldFlowRate\n    ) external returns (bool);\n\n    /// @notice A hook which executes on stream deletion if the hook contract is set in the CFA\n    /// @dev This should be implemented with an onlyCFA modifier, so that only the CFA can call the function\n    /// @param token the streamed super token\n    /// @param newFlowData the new flow data taken by the hook\n    /// @param oldFlowRate previous flowrate\n    /// @return bool\n    function onDelete(\n        ISuperfluidToken token,\n        CFAHookParams memory newFlowData,\n        int96 oldFlowRate\n    ) external returns (bool);\n}\n",
  "sourcePath": "/home/runner/work/protocol-monorepo/protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementHook.sol",
  "ast": {
    "absolutePath": "project:/contracts/interfaces/agreements/IConstantFlowAgreementHook.sol",
    "exportedSymbols": {
      "IConstantFlowAgreementHook": [
        21625
      ],
      "ISuperfluidToken": [
        24572
      ]
    },
    "id": 21626,
    "license": "AGPLv3",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 21572,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "35:23:37"
      },
      {
        "absolutePath": "project:/contracts/interfaces/superfluid/ISuperfluidToken.sol",
        "file": "../superfluid/ISuperfluidToken.sol",
        "id": 21574,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 21626,
        "sourceUnit": 24573,
        "src": "60:70:37",
        "symbolAliases": [
          {
            "foreign": {
              "id": 21573,
              "name": "ISuperfluidToken",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 24572,
              "src": "69:16:37",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IConstantFlowAgreementHook",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 21575,
          "nodeType": "StructuredDocumentation",
          "src": "132:241:37",
          "text": "@title IConstantFlowAgreementHook interface\n @author Superfluid\n @notice An interface for the functions needed by a CFA hook contract\n @dev The contract that implements this interface MUST only allow the CFA contract to call it"
        },
        "fullyImplemented": false,
        "id": 21625,
        "linearizedBaseContracts": [
          21625
        ],
        "name": "IConstantFlowAgreementHook",
        "nameLocation": "383:26:37",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "IConstantFlowAgreementHook.CFAHookParams",
            "id": 21584,
            "members": [
              {
                "constant": false,
                "id": 21577,
                "mutability": "mutable",
                "name": "sender",
                "nameLocation": "455:6:37",
                "nodeType": "VariableDeclaration",
                "scope": 21584,
                "src": "447:14:37",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 21576,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "447:7:37",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 21579,
                "mutability": "mutable",
                "name": "receiver",
                "nameLocation": "479:8:37",
                "nodeType": "VariableDeclaration",
                "scope": 21584,
                "src": "471:16:37",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 21578,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "471:7:37",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 21581,
                "mutability": "mutable",
                "name": "flowOperator",
                "nameLocation": "505:12:37",
                "nodeType": "VariableDeclaration",
                "scope": 21584,
                "src": "497:20:37",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 21580,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "497:7:37",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 21583,
                "mutability": "mutable",
                "name": "flowRate",
                "nameLocation": "533:8:37",
                "nodeType": "VariableDeclaration",
                "scope": 21584,
                "src": "527:14:37",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_int96",
                  "typeString": "int96"
                },
                "typeName": {
                  "id": 21582,
                  "name": "int96",
                  "nodeType": "ElementaryTypeName",
                  "src": "527:5:37",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int96",
                    "typeString": "int96"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "CFAHookParams",
            "nameLocation": "423:13:37",
            "nodeType": "StructDefinition",
            "scope": 21625,
            "src": "416:132:37",
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 21585,
              "nodeType": "StructuredDocumentation",
              "src": "554:330:37",
              "text": "@notice A hook which executes on stream creation if the hook contract is set in the CFA\n @dev This should be implemented with an onlyCFA modifier, so that only the CFA can call the function\n @param token the streamed super token\n @param newFlowData the new flow data taken by the hook\n @return bool"
            },
            "functionSelector": "e3d8fefe",
            "id": 21596,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "onCreate",
            "nameLocation": "898:8:37",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 21592,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21588,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "924:5:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 21596,
                  "src": "907:22:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISuperfluidToken_$24572",
                    "typeString": "contract ISuperfluidToken"
                  },
                  "typeName": {
                    "id": 21587,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 21586,
                      "name": "ISuperfluidToken",
                      "nameLocations": [
                        "907:16:37"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 24572,
                      "src": "907:16:37"
                    },
                    "referencedDeclaration": 24572,
                    "src": "907:16:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISuperfluidToken_$24572",
                      "typeString": "contract ISuperfluidToken"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 21591,
                  "mutability": "mutable",
                  "name": "newFlowData",
                  "nameLocation": "952:11:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 21596,
                  "src": "931:32:37",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_CFAHookParams_$21584_memory_ptr",
                    "typeString": "struct IConstantFlowAgreementHook.CFAHookParams"
                  },
                  "typeName": {
                    "id": 21590,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 21589,
                      "name": "CFAHookParams",
                      "nameLocations": [
                        "931:13:37"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 21584,
                      "src": "931:13:37"
                    },
                    "referencedDeclaration": 21584,
                    "src": "931:13:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CFAHookParams_$21584_storage_ptr",
                      "typeString": "struct IConstantFlowAgreementHook.CFAHookParams"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "906:58:37"
            },
            "returnParameters": {
              "id": 21595,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21594,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 21596,
                  "src": "999:4:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 21593,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "999:4:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "998:6:37"
            },
            "scope": 21625,
            "src": "889:116:37",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 21597,
              "nodeType": "StructuredDocumentation",
              "src": "1011:373:37",
              "text": "@notice A hook which executes on stream update if the hook contract is set in the CFA\n @dev This should be implemented with an onlyCFA modifier, so that only the CFA can call the function\n @param token the streamed super token\n @param newFlowData the new flow data taken by the hook\n @param oldFlowRate previous flowrate\n @return bool"
            },
            "functionSelector": "6ac5bc31",
            "id": 21610,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "onUpdate",
            "nameLocation": "1398:8:37",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 21606,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21600,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "1433:5:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 21610,
                  "src": "1416:22:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISuperfluidToken_$24572",
                    "typeString": "contract ISuperfluidToken"
                  },
                  "typeName": {
                    "id": 21599,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 21598,
                      "name": "ISuperfluidToken",
                      "nameLocations": [
                        "1416:16:37"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 24572,
                      "src": "1416:16:37"
                    },
                    "referencedDeclaration": 24572,
                    "src": "1416:16:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISuperfluidToken_$24572",
                      "typeString": "contract ISuperfluidToken"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 21603,
                  "mutability": "mutable",
                  "name": "newFlowData",
                  "nameLocation": "1469:11:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 21610,
                  "src": "1448:32:37",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_CFAHookParams_$21584_memory_ptr",
                    "typeString": "struct IConstantFlowAgreementHook.CFAHookParams"
                  },
                  "typeName": {
                    "id": 21602,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 21601,
                      "name": "CFAHookParams",
                      "nameLocations": [
                        "1448:13:37"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 21584,
                      "src": "1448:13:37"
                    },
                    "referencedDeclaration": 21584,
                    "src": "1448:13:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CFAHookParams_$21584_storage_ptr",
                      "typeString": "struct IConstantFlowAgreementHook.CFAHookParams"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 21605,
                  "mutability": "mutable",
                  "name": "oldFlowRate",
                  "nameLocation": "1496:11:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 21610,
                  "src": "1490:17:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int96",
                    "typeString": "int96"
                  },
                  "typeName": {
                    "id": 21604,
                    "name": "int96",
                    "nodeType": "ElementaryTypeName",
                    "src": "1490:5:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int96",
                      "typeString": "int96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1406:107:37"
            },
            "returnParameters": {
              "id": 21609,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21608,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 21610,
                  "src": "1532:4:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 21607,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1532:4:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1531:6:37"
            },
            "scope": 21625,
            "src": "1389:149:37",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 21611,
              "nodeType": "StructuredDocumentation",
              "src": "1544:375:37",
              "text": "@notice A hook which executes on stream deletion if the hook contract is set in the CFA\n @dev This should be implemented with an onlyCFA modifier, so that only the CFA can call the function\n @param token the streamed super token\n @param newFlowData the new flow data taken by the hook\n @param oldFlowRate previous flowrate\n @return bool"
            },
            "functionSelector": "2742e95a",
            "id": 21624,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "onDelete",
            "nameLocation": "1933:8:37",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 21620,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21614,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "1968:5:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 21624,
                  "src": "1951:22:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISuperfluidToken_$24572",
                    "typeString": "contract ISuperfluidToken"
                  },
                  "typeName": {
                    "id": 21613,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 21612,
                      "name": "ISuperfluidToken",
                      "nameLocations": [
                        "1951:16:37"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 24572,
                      "src": "1951:16:37"
                    },
                    "referencedDeclaration": 24572,
                    "src": "1951:16:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISuperfluidToken_$24572",
                      "typeString": "contract ISuperfluidToken"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 21617,
                  "mutability": "mutable",
                  "name": "newFlowData",
                  "nameLocation": "2004:11:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 21624,
                  "src": "1983:32:37",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_CFAHookParams_$21584_memory_ptr",
                    "typeString": "struct IConstantFlowAgreementHook.CFAHookParams"
                  },
                  "typeName": {
                    "id": 21616,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 21615,
                      "name": "CFAHookParams",
                      "nameLocations": [
                        "1983:13:37"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 21584,
                      "src": "1983:13:37"
                    },
                    "referencedDeclaration": 21584,
                    "src": "1983:13:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CFAHookParams_$21584_storage_ptr",
                      "typeString": "struct IConstantFlowAgreementHook.CFAHookParams"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 21619,
                  "mutability": "mutable",
                  "name": "oldFlowRate",
                  "nameLocation": "2031:11:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 21624,
                  "src": "2025:17:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int96",
                    "typeString": "int96"
                  },
                  "typeName": {
                    "id": 21618,
                    "name": "int96",
                    "nodeType": "ElementaryTypeName",
                    "src": "2025:5:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int96",
                      "typeString": "int96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1941:107:37"
            },
            "returnParameters": {
              "id": 21623,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21622,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 21624,
                  "src": "2067:4:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 21621,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2067:4:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2066:6:37"
            },
            "scope": 21625,
            "src": "1924:149:37",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 21626,
        "src": "373:1702:37",
        "usedErrors": []
      }
    ],
    "src": "35:2041:37"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.19+commit.7dd6d404.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.11",
  "updatedAt": "2023-03-14T16:31:13.952Z",
  "devdoc": {
    "author": "Superfluid",
    "details": "The contract that implements this interface MUST only allow the CFA contract to call it",
    "kind": "dev",
    "methods": {
      "onCreate(address,(address,address,address,int96))": {
        "details": "This should be implemented with an onlyCFA modifier, so that only the CFA can call the function",
        "params": {
          "newFlowData": "the new flow data taken by the hook",
          "token": "the streamed super token"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "onDelete(address,(address,address,address,int96),int96)": {
        "details": "This should be implemented with an onlyCFA modifier, so that only the CFA can call the function",
        "params": {
          "newFlowData": "the new flow data taken by the hook",
          "oldFlowRate": "previous flowrate",
          "token": "the streamed super token"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "onUpdate(address,(address,address,address,int96),int96)": {
        "details": "This should be implemented with an onlyCFA modifier, so that only the CFA can call the function",
        "params": {
          "newFlowData": "the new flow data taken by the hook",
          "oldFlowRate": "previous flowrate",
          "token": "the streamed super token"
        },
        "returns": {
          "_0": "bool"
        }
      }
    },
    "title": "IConstantFlowAgreementHook interface",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "onCreate(address,(address,address,address,int96))": {
        "notice": "A hook which executes on stream creation if the hook contract is set in the CFA"
      },
      "onDelete(address,(address,address,address,int96),int96)": {
        "notice": "A hook which executes on stream deletion if the hook contract is set in the CFA"
      },
      "onUpdate(address,(address,address,address,int96),int96)": {
        "notice": "A hook which executes on stream update if the hook contract is set in the CFA"
      }
    },
    "notice": "An interface for the functions needed by a CFA hook contract",
    "version": 1
  }
}