"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.networkNameToChainIdMap = exports.chainIdToResolverDataMap = exports.AUTHORIZE_FULL_CONTROL = exports.AUTHORIZE_FLOW_OPERATOR_DELETE = exports.AUTHORIZE_FLOW_OPERATOR_UPDATE = exports.AUTHORIZE_FLOW_OPERATOR_CREATE = exports.chainIds = exports.BASE_18 = exports.YEAR_IN_SECONDS = exports.MONTH_IN_SECONDS = exports.WEEK_IN_SECONDS = exports.DAY_IN_SECONDS = exports.HOUR_IN_SECONDS = exports.MINUTE_IN_SECONDS = exports.MINUTES_PER_HOUR = exports.HOURS_PER_DAY = exports.DAYS_PER_WEEK = exports.DAYS_PER_MONTH = exports.MONTHS_PER_YEAR = void 0;
const metadata_1 = __importDefault(require("@superfluid-finance/metadata"));
const defaultSubgraphReleaseTag_json_1 = __importDefault(require("./defaultSubgraphReleaseTag.json"));
/******* TIME CONSTANTS *******/
exports.MONTHS_PER_YEAR = 12;
exports.DAYS_PER_MONTH = 30;
exports.DAYS_PER_WEEK = 7;
exports.HOURS_PER_DAY = 24;
exports.MINUTES_PER_HOUR = 60;
exports.MINUTE_IN_SECONDS = 60;
exports.HOUR_IN_SECONDS = exports.MINUTE_IN_SECONDS * exports.MINUTES_PER_HOUR;
exports.DAY_IN_SECONDS = exports.HOUR_IN_SECONDS * exports.HOURS_PER_DAY;
exports.WEEK_IN_SECONDS = exports.DAY_IN_SECONDS * exports.DAYS_PER_WEEK;
exports.MONTH_IN_SECONDS = exports.DAY_IN_SECONDS * exports.DAYS_PER_MONTH;
exports.YEAR_IN_SECONDS = exports.MONTH_IN_SECONDS * exports.MONTHS_PER_YEAR; // NOTE: Is 360 days (misses 5-6 days)
exports.BASE_18 = 1e18;
exports.chainIds = metadata_1.default.networks.map((x) => x.chainId);
/******* ACL AUTHORIZATION BIT OPERATIONS *******/
exports.AUTHORIZE_FLOW_OPERATOR_CREATE = 1 << 0;
exports.AUTHORIZE_FLOW_OPERATOR_UPDATE = 1 << 1;
exports.AUTHORIZE_FLOW_OPERATOR_DELETE = 1 << 2;
exports.AUTHORIZE_FULL_CONTROL = exports.AUTHORIZE_FLOW_OPERATOR_CREATE |
    exports.AUTHORIZE_FLOW_OPERATOR_UPDATE |
    exports.AUTHORIZE_FLOW_OPERATOR_DELETE;
const subgraphReleaseTag = (globalThis.process && globalThis.process.env.SUBGRAPH_RELEASE_TAG) ||
    defaultSubgraphReleaseTag_json_1.default.value;
const getAddressesData = (chainId) => {
    const networkData = metadata_1.default.networks.find((x) => x.chainId === chainId);
    if (!networkData)
        return null;
    const hostedEndpoint = networkData.subgraphV1.hostedEndpoint;
    const subgraphAPIEndpoint = subgraphReleaseTag
        ? hostedEndpoint.replace("v1", subgraphReleaseTag)
        : hostedEndpoint;
    return {
        subgraphAPIEndpoint,
        networkName: networkData.name,
        nativeTokenSymbol: networkData.nativeTokenSymbol,
        addresses: networkData.contractsV1,
    };
};
exports.chainIdToResolverDataMap = new Map(metadata_1.default.networks.map((x) => [x.chainId, getAddressesData(x.chainId)]));
exports.networkNameToChainIdMap = new Map(metadata_1.default.networks.map((x) => [x.name, x.chainId]));
//# sourceMappingURL=constants.js.map